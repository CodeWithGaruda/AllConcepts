in eclipse maven comes default
so u can use it directly with now mvn installed in your system

maven folder structure:
by default maven gives u some folders
ResourceBundle eb=ResourceBunble.getBundle("file");

how to execute maven project
while executing maven project we need to follow certain set of rules

mvn build life cycle:
----------------------------------------------------------------------------------
validate all files   :mvn validate
compile              :mvn compile
testing              :mvn test
package              :mvn package
integration testing  ---
verify               ---
install              :mvn install
deploy               :mvn deploy

you can also clean files which is not under phase
bt it will clean all the previous files of mvn execution
-------------------------------------------------------------------------------------------------
how to run the maven project
right click on pom.xml
run as > <required option> 
i.e if u wanna test use maven test
but before u use that phase all the previous life cycles will be done

run as > maven build
then it will ask for goal
give clean => this will clean the project
give compile => this will compile the project
here u might get some error u need to configure JDK rather than JRE
window>preferences>java>installed jre's>"here add >standard vm>in jre home give jdk path"

give install =>it will do all previous phases and create a jar in target folder
give test => it will run all the test cases
u can also give two commands at the same time
give clean test

this will generate the test results in target folder

---------------------------------------------------------------------------------------------------
Notes:
u need to navigate to project where u can see the pom.xml files
all the maven cmd's are executed on pom.xml file

mvn clean: Cleans the project and removes all files generated by the previous build.
mvn validate: it validates the whole project
mvn compile: Compiles source code of the project.
mvn test: Runs tests for the project.
mvn package: Creates JAR or WAR file for the project to convert it into a distributable format.
mvn install: Deploys the packaged JAR/ WAR file to the local repository.
mvn deploy: Copies the packaged JAR/ WAR file to the remote repository after compiling, running tests and building the project.
